"""
Chapter 1
Multithreading - Python's GIL
Keyword - CPython, 메모리 관리, GIL 사용 이유

"""
"""
1. 파이썬 인터프리터와 성능
    - 파이썬은 인터프리터를 통해 코드를 해석. 파이썬 인터프리터라는 프로그램이 먼저 메모리에 로드 후 
      파이썬 코드 실행 -> 속도 느림

2. 파이썬 메모리 관리
    - 파이썬은 객체의 생성과 소멸을 reference count를 통해서 관리
    - refcount란 객체가 가지고 있는 속성으로 자신을 몇군데에서 참조하고 있는지에 대한 속성
    - 인터프리터는 recount를 검사해서 해당 객체의 메모리를 회수할 지 결정

GIL(Global Interpreter Lock)
    (1). 파이썬 인터프리터가 한 쓰레드만 하나의 바이트코드만 실행할 수 있게 하는 것
        GIL은 하나의 쓰레드에게 모든 자원의 점유를 허락. 다른 쓰레드는 자원을 할당받기 전에 실행 불가
    (2). CPython 메모리 관리가 취약하기 때문(즉, Thread-safe)
    (3). 단일 스레드도 충분히 빠르다.
    (4). 프로세스 사용 가능(Numpy/Scipy)등 GIL 외부 영역에서 효율적인 코딩 가능
    (5). 병렬 처리는 Multiprocessing, asyncio 선택지 다양함.
    (6). Thread 동시성 완벽 처리를 위해서 -> Jython, IronPython, Stackless Python 등이 존재

Why GIL?
    - 파이썬의 모든 것은 객체. CPython에서 각각의 개체들은 하나의 C구조체와 대응. 
    - GIL은 특정 시점에서 언제나 하나의 쓰레드만 실행하도록 만든 것. 
    - 특정 시점에서 인터프리터를 사용하는 쓰레드는 언제나 1개.
    - 인터프리터에 뮤텍스(mutex) 락을 걸어서 GIL

3. GIL의 의의
    - 하나의 프로그램을 멀티 코어를 사용하는 형태로 만들 필요가 크게 없다.
    - 멀티프로세싱 모듈을 통해 멀티 프로세스 프로그래밍으로 여러 코어를 사용할 수 있다.

"""