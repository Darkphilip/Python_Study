"""
Chapter 1
Multithreading - Difference between Process and Thread
Keyword - Process, Thread

"""
"""
(1). 서론
    - 프로그램 -> 프로세스 -> 스레드
    - 프로그램은 코드 덩어리 파일, 그 프로그램을 실행한 것이 프로세스.
    - 스레드는 프로세스의 코드에 정의된 절차에 따라 실행되는 특정한 수행 경로.

(2). 프로그램
    - 파일이 저장 장치에 저장되어 있지만 메모리에는 올라가 있지 않은 정적인 상태.
    - 아직 실행되지 않은 파일 그 자체

(3). 프로세스
    - 운영체제 관점에서 프로세스가 최소 작업 단위
    - 운영체제 -> 할당 받는 작업 단위(실행 중인 프로그램)
    - CPU 동작 시간, 주소공간(독립적)
    - Code, Data, Stack, Heap -> 독립된 메모리 영역을 할당 
    - 다른 프로세스의 변수나 자료에 접근 불가
    - 최소 1개의 메인 스레드 보유
    - 파이프, 파일, 소켓 등을 사용해서 프로세스간 통신(Cost 높음) -> Context Switching

(4). 스레드 
    - CPU 입장에서의 최소 작업 단위
    - 프로세스 내에 실행 흐름 단위
    - 프로세스 자원 사용
    - Stack만 별도 할당 나머지는 공유(Code, Data, Heap)
    - 메모리 공유(변수 공유)
    - 한 스레드의 결과가 다른 스레드의 영향 끼침
    - 동기화 문제는 정말 주의(디버깅 어려움)

(5). 멀티 스레드
    - Context-Switching 할 때 공유하고 있는 메모리만큼의 메모리 자원 아낄 수 있다.
    - 스레드는 프로세스 내의 Stack 영역을 제외한 모든 메모리를 공유하기 때문에 통신의 부담이 적어서 응답 시간이 빠르다.
    - 한 개의 단일 어플리케이션(응용 프로그램) -> 여러 스레드로 구성 후 작업 처리
    - 시스템 자원 소모 감소(효율성), 처리량 증가(Cost 감소)
    - 스레드 하나가 프로세스 내 자원을 망쳐버리면 모든 프로세스 종료
    - 자원을 공유하기 때문에 필연적으로 동기화 문제 발생
    - 동기화 문제: 여러 스레드가 함께 전역 변수를 사용할 경우 발생할 수 있는 충돌
    - 통신 부담 감소, 디버깅 어려움, 단일 프로세스에는 효과 미약, 자원 공유 문제(교착 상태), 프로세스 영향 준다

(6). 멀티 프로세스
    - 한 개의 단일 어플리케이션(응용 프로그램) -> 여러 프로세스로 구성 후 작업 처리
    - 한 개의 프로세스 문제 발생은 확산 없음(프로세스 kill)
    - 캐시 체인지, Cost 비용 매우 높음(오버헤드), 복잡한 통신 방식 사용

(7). 결론
    - 프로세스와 스레드 는 개념 범위부터 다르다. 스레드는 프로세스 안에 포함
    - 운영체제가 프로세스에게 Code/Data/Stack/Heap 메모리 영역을 할당해 주고 최소 작업 단위로
      삼는 반면, 스레드는 프로세스 내에서 Stack 메모리 영역을 제외한 다른 메모리 영역을 같은
      프로세스 내 다른 스레드와 공유한다.
    - 프로세스는 다른 프로세스와 정보를 공유하려면 IPC를 사용한 등의 번거로운 과정을 거쳐야 하지만,
      스레드는 기본 구조 자체가 메모리를 공유하는 구조이기 때문에 다른 스레드와 정보 공유가 쉽다.
      때문에 멀티태스킹보다 멀티스레드가 자원을 아낄 수 있게 된다. 다만 스레드의 스케줄링은 운영체제가
      처리하지 않기 때문에 프로그래머가 직접 동기화 문제에 대응할 수 있어야 한다.

"""